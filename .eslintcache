[{"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\reportWebVitals.ts":"1","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\App.tsx":"2","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Weathercard.tsx":"3","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Navbar.tsx":"4"},{"size":425,"mtime":1610103030161,"results":"5","hashOfConfig":"6"},{"size":335,"mtime":1610394921375,"results":"7","hashOfConfig":"6"},{"size":2043,"mtime":1610395095605,"results":"8","hashOfConfig":"6"},{"size":503,"mtime":1610361133484,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zx2kuj",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\reportWebVitals.ts",[],"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\App.tsx",[],"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Weathercard.tsx",["19","20","21"],"import React, { Component } from 'react'\r\n\r\nimport axios from 'axios'\r\nimport logo from '../images/logo.jpg'\r\n\r\ninterface ICity{\r\n  cityname: string;\r\n}\r\ninterface IPost {\r\n  temperature: number;\r\n  weather: string;\r\n  feelsLike: number;\r\n}\r\n\r\n\r\n\r\nconst css = require('./Weathercard.css')\r\n\r\nclass WeatherCard extends Component {\r\n\r\n  state = {\r\n    city: \"\",\r\n    posts: {temperature: 0,\r\n      weather: \"\",\r\n      feelsLike: 0,\r\n    }}\r\n\r\n  componentWillMount(){\r\n    this.setState({\r\n      city: \"Miskolc\"\r\n    }, this.getLocationData)\r\n    console.log(this.state.city)\r\n\r\n  }\r\n\r\n  defaultPost: IPost = {temperature: 0, weather: \"\", feelsLike: 0 }\r\n\r\n  onChangeText = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      city: event.currentTarget.value\r\n    })\r\n    console.log(this.state.city)\r\n  }\r\n\r\n  onSubmit = (event: React.SyntheticEvent) => {\r\n    event.preventDefault()\r\n\r\n  }\r\n\r\n\r\n  getLocationData(){\r\n    axios\r\n      .get<any>(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${process.env.REACT_APP_API_KEY}&units=metric`)\r\n      .then((response: any) => {\r\n        const newPost :IPost =\r\n        {temperature: Number(response.data.main.temp),\r\n          weather: String(response.data.weather[0].main),\r\n          feelsLike: Number(response.data.main.feels_like)}\r\n        this.setState({\r\n          posts: newPost\r\n        },()=>{\r\n          console.log(this.state.posts)\r\n        })\r\n    });\r\n  }\r\n\r\n\r\n    render() {\r\n    return (\r\n      <div>\r\n        <div className=\"card\">\r\n          <img className=\"card-img-top\" src={logo} alt=\"Card image\"/>\r\n          <div className=\"card-body\">\r\n            <form onSubmit={this.onSubmit}>\r\n              <h4 className=\"card-title\">John Doe</h4>\r\n              <p className=\"card-text\">Some example text.</p>\r\n              <input type=\"text\" onChange={this.onChangeText}></input>\r\n              <button>gomb</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherCard\r\n","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Navbar.tsx",[],{"ruleId":"22","severity":1,"message":"23","line":6,"column":11,"nodeType":"24","messageId":"25","endLine":6,"endColumn":16},{"ruleId":"22","severity":1,"message":"26","line":17,"column":7,"nodeType":"24","messageId":"25","endLine":17,"endColumn":10},{"ruleId":"27","severity":1,"message":"28","line":72,"column":11,"nodeType":"29","endLine":72,"endColumn":70},"@typescript-eslint/no-unused-vars","'ICity' is defined but never used.","Identifier","unusedVar","'css' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]