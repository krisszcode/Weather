[{"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\reportWebVitals.ts":"1","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\App.tsx":"2","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Weathercard.tsx":"3","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Navbar.tsx":"4","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\index.tsx":"5","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Header.tsx":"6","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\WeatherCard.tsx":"7","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\ThemeProvider.tsx":"8","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\i18n.tsx":"9"},{"size":425,"mtime":1610103030161,"results":"10","hashOfConfig":"11"},{"size":393,"mtime":1610558747686,"results":"12","hashOfConfig":"11"},{"size":4526,"mtime":1610558715011,"results":"13","hashOfConfig":"11"},{"size":503,"mtime":1610361133484,"results":"14","hashOfConfig":"11"},{"size":703,"mtime":1610566428075,"results":"15","hashOfConfig":"11"},{"size":1908,"mtime":1610570696304,"results":"16","hashOfConfig":"11"},{"size":4526,"mtime":1610558715011,"results":"17","hashOfConfig":"11"},{"size":1013,"mtime":1610560904023,"results":"18","hashOfConfig":"11"},{"size":401,"mtime":1610569463040,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zx2kuj",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\reportWebVitals.ts",[],"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\App.tsx",[],"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Weathercard.tsx",["40"],"import React, { Component } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\ninterface IPost {\r\n  temperature: number;\r\n  weather: string;\r\n  feelsLike: number;\r\n}\r\n\r\n\r\nconst css = require('./Weathercard.css')\r\n\r\n\r\n\r\nclass Weathercard extends Component {\r\n\r\n  interval:any;\r\n\r\n  state = {\r\n    city: \"\",\r\n    cityToDisplay: \"\",\r\n    latitude:0,\r\n    longitude: 0,\r\n    time:0,\r\n    pictureToDisplay: \"\",\r\n    posts: {temperature: 0,\r\n      weather: \"\",\r\n      feelsLike: 0,\r\n    }}\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        console.log(\"Latitude is :\", position.coords.latitude);\r\n        console.log(\"Longitude is :\", position.coords.longitude);\r\n        this.setState({\r\n          latitude: position.coords.latitude,\r\n          longitude:position.coords.longitude\r\n        },() => this.getLocationDataByCoords(this.state.latitude,this.state.longitude))\r\n\r\n      },\r\n      (error) => {\r\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n        this.setState({\r\n          city: \"Budapest\",\r\n          cityToDisplay: \"Budapest\"\r\n        }, this.getLocationDataByName)\r\n      }\r\n    );\r\n  }\r\n\r\n  // componentWillMount(){\r\n  //   this.setState({\r\n  //     city: \"Győr\",\r\n  //     cityToDisplay: \"Győr\"\r\n  //   }, this.getLocationDataByName)\r\n  // }\r\n\r\n\r\n\r\n  defaultPost: IPost = {temperature: 0, weather: \"\", feelsLike: 0 }\r\n\r\n  onChangeText = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      city: event.currentTarget.value\r\n    })\r\n    console.log(this.state.city)\r\n  }\r\n\r\n  onSubmit = (event: React.SyntheticEvent) => {\r\n    event.preventDefault()\r\n    this.getLocationDataByName()\r\n  }\r\n\r\n  getLocationDataByCoords(latitude:Number,longitude:Number){\r\n    axios\r\n    .get<IPost>(`http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${process.env.REACT_APP_API_KEY}&units=metric`)\r\n    .then((response: any) => {\r\n      const newPost :IPost =\r\n      {temperature: Number(response.data.main.temp),\r\n        weather: String(response.data.weather[0].main),\r\n        feelsLike: Number(response.data.main.feels_like)}\r\n        if(response.status === 200){\r\n          this.setState({\r\n            posts: newPost,\r\n            pictureToDisplay: `/weatherIMG/${response.data.weather[0].main}.jpg`,\r\n            cityToDisplay : response.data.name\r\n          }\r\n\r\n          ,()=>{\r\n            console.log(this.state.posts)\r\n            console.log(this.state.pictureToDisplay)\r\n          })\r\n        }\r\n  })\r\n  }\r\n\r\n  getLocationDataByName(){\r\n    axios\r\n      .get<IPost>(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${process.env.REACT_APP_API_KEY}&units=metric`)\r\n      .then((response: any) => {\r\n        const newPost :IPost =\r\n        {temperature: Number(response.data.main.temp),\r\n          weather: String(response.data.weather[0].main),\r\n          feelsLike: Number(response.data.main.feels_like)}\r\n          if(response.status === 200){\r\n            this.setState({\r\n              posts: newPost,\r\n              pictureToDisplay: `/weatherIMG/${response.data.weather[0].main}.jpg`,\r\n              cityToDisplay : this.state.city\r\n            }\r\n\r\n            ,()=>{\r\n              console.log(this.state.posts)\r\n              console.log(this.state.pictureToDisplay)\r\n            })\r\n          }\r\n    })\r\n  }\r\n\r\n\r\n\r\n    render() {\r\n\r\n    return (\r\n\r\n      <div>\r\n        {this.state.cityToDisplay!== \"\" ?\r\n          <div className=\"card\">\r\n          <div>\r\n            <img className=\"card-img-top\" src={this.state.pictureToDisplay} alt={this.state.posts.weather}/>\r\n            <div className=\"card-body\">\r\n              <form onSubmit={this.onSubmit}>\r\n                <h4 className=\"card-title\">{this.state.cityToDisplay}</h4>\r\n                <p className=\"card-text\">{this.state.posts.weather}</p>\r\n                <p className=\"card-text\">{this.state.posts.temperature} ℃</p>\r\n                <p className=\"card-text\">{this.state.posts.feelsLike} ℃</p>\r\n                <input type=\"text\" onChange={this.onChangeText}></input>\r\n                <button>gomb</button>\r\n              </form>\r\n            </div>\r\n            </div>\r\n          </div> :\r\n          <div className=\"d-flex justify-content-center\">\r\n            <div className=\"spinner-border text-light\" role=\"status\">\r\n            </div>\r\n            <p>Please enable location</p>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Weathercard\r\n","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Navbar.tsx",[],"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\index.tsx",[],"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\Header.tsx",["41"],"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\WeatherCard.tsx",["42"],"C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\components\\ThemeProvider.tsx",["43"],"import React, { useState } from \"react\";\r\n\r\ntype Theme = \"light\" | \"dark\";\r\ntype ThemeContext = { theme: Theme; toggleTheme: () => void; toggleDarkTheme: () => void;toggleLightTheme: () => void; };\r\n\r\nexport const ThemeContext = React.createContext<ThemeContext>(\r\n  {} as ThemeContext\r\n);\r\n\r\nexport const ThemeProvider: React.FC = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>(\"light\");\r\n  const toggleTheme = () => {\r\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\r\n  };\r\n\r\n  const toggleDarkTheme = () => {\r\n    setTheme(\"dark\");\r\n  };\r\n  const toggleLightTheme = () => {\r\n    setTheme(\"light\");\r\n  };\r\n\r\n  const color = theme === \"light\" ? \"#333\" : \"#FFF\";\r\n  const backgroundColor = theme === \"light\" ? \"#FFF\" : \"#333\";\r\n\r\n  document.body.style.color = color;\r\n  document.body.style.backgroundColor = backgroundColor;\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme, toggleDarkTheme, toggleLightTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};","C:\\Users\\Krissz\\Desktop\\React\\Typescript\\weather\\src\\i18n.tsx",[],{"ruleId":"44","severity":1,"message":"45","line":12,"column":7,"nodeType":"46","messageId":"47","endLine":12,"endColumn":10},{"ruleId":"48","severity":1,"message":"49","line":31,"column":4,"nodeType":"50","endLine":31,"endColumn":11,"suggestions":"51"},{"ruleId":"44","severity":1,"message":"45","line":12,"column":7,"nodeType":"46","messageId":"47","endLine":12,"endColumn":10},{"ruleId":"52","severity":1,"message":"53","line":6,"column":14,"nodeType":"46","messageId":"54","endLine":6,"endColumn":26},"@typescript-eslint/no-unused-vars","'css' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'hour', 'isSwitched', 'toggleDarkTheme', and 'toggleLightTheme'. Either include them or remove the dependency array.","ArrayExpression",["55"],"@typescript-eslint/no-redeclare","'ThemeContext' is already defined.","redeclared",{"desc":"56","fix":"57"},"Update the dependencies array to be: [hour, isSwitched, theme, toggleDarkTheme, toggleLightTheme]",{"range":"58","text":"59"},[815,822],"[hour, isSwitched, theme, toggleDarkTheme, toggleLightTheme]"]